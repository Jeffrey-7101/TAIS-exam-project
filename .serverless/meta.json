{
  "C:\\Users\\ACER\\Documents\\Ing Sistemas 2024 II\\TAIS\\SistemaInventarios\\inventory-management": {
    "versionSfCore": null,
    "versionFramework": "4.4.11",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "unsatais",
            "app": "inventory-management",
            "service": "inventory-management",
            "provider": {
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-east-1",
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/Products",
                    "arn:aws:dynamodb:us-east-1:*:table/InboundNotes",
                    "arn:aws:dynamodb:us-east-1:*:table/OutboundNotes"
                  ]
                }
              ],
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "AddProductLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-addProduct"
                    }
                  },
                  "GetProductsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getProducts"
                    }
                  },
                  "UpdateProductLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-updateProduct"
                    }
                  },
                  "DeleteProductLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-deleteProduct"
                    }
                  },
                  "AddInboundNoteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-addInboundNote"
                    }
                  },
                  "GetAllInboundNotesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getAllInboundNotes"
                    }
                  },
                  "GetInboundNoteDataLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getInboundNoteData"
                    }
                  },
                  "GetInboundNoteXLSXLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getInboundNoteXLSX"
                    }
                  },
                  "DeleteInboundNoteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-deleteInboundNote"
                    }
                  },
                  "AddOutboundNoteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-addOutboundNote"
                    }
                  },
                  "GetAllOutboundNotesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getAllOutboundNotes"
                    }
                  },
                  "GetOutboundNoteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-getOutboundNote"
                    }
                  },
                  "DeleteOutboundNoteLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/inventory-management-dev-deleteOutboundNote"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "inventory-management",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/inventory-management-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/inventory-management-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Scan",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:UpdateItem"
                                ],
                                "Resource": [
                                  "arn:aws:dynamodb:us-east-1:*:table/Products",
                                  "arn:aws:dynamodb:us-east-1:*:table/InboundNotes",
                                  "arn:aws:dynamodb:us-east-1:*:table/OutboundNotes"
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "inventory-management",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "AddProductLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.add_product",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-addProduct",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddProductLogGroup"
                    ]
                  },
                  "GetProductsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_products",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getProducts",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetProductsLogGroup"
                    ]
                  },
                  "UpdateProductLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.update_product",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-updateProduct",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateProductLogGroup"
                    ]
                  },
                  "DeleteProductLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.delete_product",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-deleteProduct",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteProductLogGroup"
                    ]
                  },
                  "AddInboundNoteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.add_inbound_note",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-addInboundNote",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddInboundNoteLogGroup"
                    ]
                  },
                  "GetAllInboundNotesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_all_inbound_notes",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getAllInboundNotes",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllInboundNotesLogGroup"
                    ]
                  },
                  "GetInboundNoteDataLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_inbound_note_data",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getInboundNoteData",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetInboundNoteDataLogGroup"
                    ]
                  },
                  "GetInboundNoteXLSXLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_inbound_note_xlsx",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getInboundNoteXLSX",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetInboundNoteXLSXLogGroup"
                    ]
                  },
                  "DeleteInboundNoteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.delete_inbound_note",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-deleteInboundNote",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteInboundNoteLogGroup"
                    ]
                  },
                  "AddOutboundNoteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.add_outbound_note",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-addOutboundNote",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddOutboundNoteLogGroup"
                    ]
                  },
                  "GetAllOutboundNotesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_all_outbound_notes",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getAllOutboundNotes",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllOutboundNotesLogGroup"
                    ]
                  },
                  "GetOutboundNoteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.get_outbound_note",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-getOutboundNote",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetOutboundNoteLogGroup"
                    ]
                  },
                  "DeleteOutboundNoteLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                        "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                      },
                      "Handler": "handler.delete_outbound_note",
                      "Runtime": "python3.9",
                      "FunctionName": "inventory-management-dev-deleteOutboundNote",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteOutboundNoteLogGroup"
                    ]
                  },
                  "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddProductLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetProductsLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateProductLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteProductLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddInboundNoteLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllInboundNotesLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetInboundNoteDataLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetInboundNoteXLSXLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteInboundNoteLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddOutboundNoteLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllOutboundNotesLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetOutboundNoteLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteOutboundNoteLambdaFunction"
                      },
                      "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-inventory-management",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceProducts": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "products",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceProductsProductidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceProducts"
                      },
                      "PathPart": "{product_id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceInboundDashnotes": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "inbound-notes",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceInboundDashnotesNoteidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceInboundDashnotes"
                      },
                      "PathPart": "{note_id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceInboundDashnotesNoteidVarXlsx": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                      },
                      "PathPart": "xlsx",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceOutboundDashnotes": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "outbound-notes",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceOutboundDashnotesNoteidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceOutboundDashnotes"
                      },
                      "PathPart": "{note_id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodProductsPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProducts"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddProductLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddProductLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodProductsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProducts"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetProductsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetProductsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodProductsProductidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProductsProductidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateProductLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateProductLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodProductsProductidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProductsProductidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteProductLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteProductLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodInboundDashnotesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceInboundDashnotes"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddInboundNoteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddInboundNoteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodInboundDashnotesGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceInboundDashnotes"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAllInboundNotesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAllInboundNotesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodInboundDashnotesNoteidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetInboundNoteDataLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetInboundNoteDataLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodInboundDashnotesNoteidVarXlsxGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceInboundDashnotesNoteidVarXlsx"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetInboundNoteXLSXLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetInboundNoteXLSXLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodInboundDashnotesNoteidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteInboundNoteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteInboundNoteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOutboundDashnotesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOutboundDashnotes"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddOutboundNoteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddOutboundNoteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOutboundDashnotesGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOutboundDashnotes"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAllOutboundNotesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAllOutboundNotesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOutboundDashnotesNoteidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOutboundDashnotesNoteidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetOutboundNoteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetOutboundNoteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOutboundDashnotesNoteidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOutboundDashnotesNoteidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteOutboundNoteLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteOutboundNoteLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1732472650404": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodProductsPost",
                      "ApiGatewayMethodProductsGet",
                      "ApiGatewayMethodProductsProductidVarPut",
                      "ApiGatewayMethodProductsProductidVarDelete",
                      "ApiGatewayMethodInboundDashnotesPost",
                      "ApiGatewayMethodInboundDashnotesGet",
                      "ApiGatewayMethodInboundDashnotesNoteidVarGet",
                      "ApiGatewayMethodInboundDashnotesNoteidVarXlsxGet",
                      "ApiGatewayMethodInboundDashnotesNoteidVarDelete",
                      "ApiGatewayMethodOutboundDashnotesPost",
                      "ApiGatewayMethodOutboundDashnotesGet",
                      "ApiGatewayMethodOutboundDashnotesNoteidVarGet",
                      "ApiGatewayMethodOutboundDashnotesNoteidVarDelete"
                    ]
                  },
                  "AddProductLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetProductsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateProductLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteProductLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddInboundNoteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddInboundNoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAllInboundNotesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllInboundNotesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetInboundNoteDataLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetInboundNoteDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetInboundNoteXLSXLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetInboundNoteXLSXLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteInboundNoteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteInboundNoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddOutboundNoteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddOutboundNoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAllOutboundNotesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllOutboundNotesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetOutboundNoteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetOutboundNoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteOutboundNoteLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteOutboundNoteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ProductsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Products",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "ProductID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "ProductID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "InboundNotesTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "InboundNotes",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "NoteID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "NoteID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "OutboundNotesTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "OutboundNotes",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "NoteID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "NoteID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                    "Export": {
                      "Name": "sls-inventory-management-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "AddProductLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-AddProductLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetProductsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetProductsLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateProductLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-UpdateProductLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteProductLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-DeleteProductLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddInboundNoteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-AddInboundNoteLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllInboundNotesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetAllInboundNotesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetInboundNoteDataLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetInboundNoteDataLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetInboundNoteXLSXLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetInboundNoteXLSXLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteInboundNoteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-DeleteInboundNoteLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddOutboundNoteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-AddOutboundNoteLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllOutboundNotesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetAllOutboundNotesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetOutboundNoteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-GetOutboundNoteLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteOutboundNoteLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU"
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-DeleteOutboundNoteLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-inventory-management-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "plugins": [
              "serverless-python-requirements"
            ],
            "custom": {
              "pythonRequirements": {
                "dockerizePip": true
              }
            },
            "functions": {
              "addProduct": {
                "handler": "handler.add_product",
                "events": [
                  {
                    "http": {
                      "path": "products",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-addProduct",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg"
              },
              "getProducts": {
                "handler": "handler.get_products",
                "events": [
                  {
                    "http": {
                      "path": "products",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getProducts",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ"
              },
              "updateProduct": {
                "handler": "handler.update_product",
                "events": [
                  {
                    "http": {
                      "path": "products/{product_id}",
                      "method": "put",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-updateProduct",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg"
              },
              "deleteProduct": {
                "handler": "handler.delete_product",
                "events": [
                  {
                    "http": {
                      "path": "products/{product_id}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-deleteProduct",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE"
              },
              "addInboundNote": {
                "handler": "handler.add_inbound_note",
                "events": [
                  {
                    "http": {
                      "path": "inbound-notes",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-addInboundNote",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE"
              },
              "getAllInboundNotes": {
                "handler": "handler.get_all_inbound_notes",
                "events": [
                  {
                    "http": {
                      "path": "inbound-notes",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getAllInboundNotes",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw"
              },
              "getInboundNoteData": {
                "handler": "handler.get_inbound_note_data",
                "events": [
                  {
                    "http": {
                      "path": "inbound-notes/{note_id}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getInboundNoteData",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0"
              },
              "getInboundNoteXLSX": {
                "handler": "handler.get_inbound_note_xlsx",
                "events": [
                  {
                    "http": {
                      "path": "inbound-notes/{note_id}/xlsx",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getInboundNoteXLSX",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os"
              },
              "deleteInboundNote": {
                "handler": "handler.delete_inbound_note",
                "events": [
                  {
                    "http": {
                      "path": "inbound-notes/{note_id}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-deleteInboundNote",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU"
              },
              "addOutboundNote": {
                "handler": "handler.add_outbound_note",
                "events": [
                  {
                    "http": {
                      "path": "outbound-notes",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-addOutboundNote",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM"
              },
              "getAllOutboundNotes": {
                "handler": "handler.get_all_outbound_notes",
                "events": [
                  {
                    "http": {
                      "path": "outbound-notes",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getAllOutboundNotes",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8"
              },
              "getOutboundNote": {
                "handler": "handler.get_outbound_note",
                "events": [
                  {
                    "http": {
                      "path": "outbound-notes/{note_id}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-getOutboundNote",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw"
              },
              "deleteOutboundNote": {
                "handler": "handler.delete_outbound_note",
                "events": [
                  {
                    "http": {
                      "path": "outbound-notes/{note_id}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "inventory-management-dev-deleteOutboundNote",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU"
              }
            },
            "resources": {
              "Resources": {
                "ProductsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Products",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "ProductID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "ProductID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "InboundNotesTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "InboundNotes",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "NoteID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "NoteID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "OutboundNotesTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "OutboundNotes",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "NoteID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "NoteID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\ACER\\Documents\\Ing Sistemas 2024 II\\TAIS\\SistemaInventarios\\inventory-management",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\ACER\\Documents\\Ing Sistemas 2024 II\\TAIS\\SistemaInventarios\\inventory-management",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "unsatais",
      "app": "inventory-management",
      "service": "inventory-management",
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:Scan",
              "dynamodb:DeleteItem",
              "dynamodb:UpdateItem"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:*:table/Products",
              "arn:aws:dynamodb:us-east-1:*:table/InboundNotes",
              "arn:aws:dynamodb:us-east-1:*:table/OutboundNotes"
            ]
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AddProductLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-addProduct"
              }
            },
            "GetProductsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getProducts"
              }
            },
            "UpdateProductLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-updateProduct"
              }
            },
            "DeleteProductLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-deleteProduct"
              }
            },
            "AddInboundNoteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-addInboundNote"
              }
            },
            "GetAllInboundNotesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getAllInboundNotes"
              }
            },
            "GetInboundNoteDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getInboundNoteData"
              }
            },
            "GetInboundNoteXLSXLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getInboundNoteXLSX"
              }
            },
            "DeleteInboundNoteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-deleteInboundNote"
              }
            },
            "AddOutboundNoteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-addOutboundNote"
              }
            },
            "GetAllOutboundNotesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getAllOutboundNotes"
              }
            },
            "GetOutboundNoteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-getOutboundNote"
              }
            },
            "DeleteOutboundNoteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/inventory-management-dev-deleteOutboundNote"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "inventory-management",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/inventory-management-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/inventory-management-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "dynamodb:DeleteItem",
                            "dynamodb:UpdateItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:*:table/Products",
                            "arn:aws:dynamodb:us-east-1:*:table/InboundNotes",
                            "arn:aws:dynamodb:us-east-1:*:table/OutboundNotes"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "inventory-management",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AddProductLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.add_product",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-addProduct",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddProductLogGroup"
              ]
            },
            "GetProductsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_products",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getProducts",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetProductsLogGroup"
              ]
            },
            "UpdateProductLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.update_product",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-updateProduct",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateProductLogGroup"
              ]
            },
            "DeleteProductLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.delete_product",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-deleteProduct",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteProductLogGroup"
              ]
            },
            "AddInboundNoteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.add_inbound_note",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-addInboundNote",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddInboundNoteLogGroup"
              ]
            },
            "GetAllInboundNotesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_all_inbound_notes",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getAllInboundNotes",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllInboundNotesLogGroup"
              ]
            },
            "GetInboundNoteDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_inbound_note_data",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getInboundNoteData",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetInboundNoteDataLogGroup"
              ]
            },
            "GetInboundNoteXLSXLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_inbound_note_xlsx",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getInboundNoteXLSX",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetInboundNoteXLSXLogGroup"
              ]
            },
            "DeleteInboundNoteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.delete_inbound_note",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-deleteInboundNote",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteInboundNoteLogGroup"
              ]
            },
            "AddOutboundNoteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.add_outbound_note",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-addOutboundNote",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddOutboundNoteLogGroup"
              ]
            },
            "GetAllOutboundNotesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_all_outbound_notes",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getAllOutboundNotes",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllOutboundNotesLogGroup"
              ]
            },
            "GetOutboundNoteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.get_outbound_note",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-getOutboundNote",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOutboundNoteLogGroup"
              ]
            },
            "DeleteOutboundNoteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
                  "S3Key": "serverless/inventory-management/dev/1732472670662-2024-11-24T18:24:30.662Z/inventory-management.zip"
                },
                "Handler": "handler.delete_outbound_note",
                "Runtime": "python3.9",
                "FunctionName": "inventory-management-dev-deleteOutboundNote",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteOutboundNoteLogGroup"
              ]
            },
            "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddProductLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetProductsLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateProductLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteProductLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddInboundNoteLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllInboundNotesLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetInboundNoteDataLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetInboundNoteXLSXLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteInboundNoteLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddOutboundNoteLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllOutboundNotesLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOutboundNoteLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteOutboundNoteLambdaFunction"
                },
                "CodeSha256": "ApqSPBOouXBT0FUbFJChmMmYPxwcPl2xB0kMQf9zGLY="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-inventory-management",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProducts": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "products",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProductsProductidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceProducts"
                },
                "PathPart": "{product_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceInboundDashnotes": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "inbound-notes",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceInboundDashnotesNoteidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceInboundDashnotes"
                },
                "PathPart": "{note_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceInboundDashnotesNoteidVarXlsx": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                },
                "PathPart": "xlsx",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOutboundDashnotes": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "outbound-notes",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOutboundDashnotesNoteidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceOutboundDashnotes"
                },
                "PathPart": "{note_id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProductsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProducts"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddProductLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddProductLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProductsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProducts"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetProductsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetProductsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProductsProductidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProductsProductidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateProductLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateProductLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProductsProductidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProductsProductidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteProductLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteProductLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodInboundDashnotesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInboundDashnotes"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddInboundNoteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddInboundNoteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodInboundDashnotesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInboundDashnotes"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllInboundNotesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllInboundNotesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodInboundDashnotesNoteidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetInboundNoteDataLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetInboundNoteDataLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodInboundDashnotesNoteidVarXlsxGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInboundDashnotesNoteidVarXlsx"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetInboundNoteXLSXLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetInboundNoteXLSXLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodInboundDashnotesNoteidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceInboundDashnotesNoteidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteInboundNoteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteInboundNoteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOutboundDashnotesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOutboundDashnotes"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddOutboundNoteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddOutboundNoteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOutboundDashnotesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOutboundDashnotes"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllOutboundNotesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllOutboundNotesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOutboundDashnotesNoteidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOutboundDashnotesNoteidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetOutboundNoteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetOutboundNoteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOutboundDashnotesNoteidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOutboundDashnotesNoteidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteOutboundNoteLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteOutboundNoteLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1732472650404": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodProductsPost",
                "ApiGatewayMethodProductsGet",
                "ApiGatewayMethodProductsProductidVarPut",
                "ApiGatewayMethodProductsProductidVarDelete",
                "ApiGatewayMethodInboundDashnotesPost",
                "ApiGatewayMethodInboundDashnotesGet",
                "ApiGatewayMethodInboundDashnotesNoteidVarGet",
                "ApiGatewayMethodInboundDashnotesNoteidVarXlsxGet",
                "ApiGatewayMethodInboundDashnotesNoteidVarDelete",
                "ApiGatewayMethodOutboundDashnotesPost",
                "ApiGatewayMethodOutboundDashnotesGet",
                "ApiGatewayMethodOutboundDashnotesNoteidVarGet",
                "ApiGatewayMethodOutboundDashnotesNoteidVarDelete"
              ]
            },
            "AddProductLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddProductLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetProductsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateProductLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateProductLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteProductLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteProductLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AddInboundNoteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddInboundNoteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllInboundNotesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllInboundNotesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetInboundNoteDataLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetInboundNoteDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetInboundNoteXLSXLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetInboundNoteXLSXLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteInboundNoteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteInboundNoteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AddOutboundNoteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddOutboundNoteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllOutboundNotesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllOutboundNotesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetOutboundNoteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOutboundNoteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteOutboundNoteLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteOutboundNoteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ProductsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Products",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "ProductID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "ProductID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "InboundNotesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "InboundNotes",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "NoteID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "NoteID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "OutboundNotesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "OutboundNotes",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "NoteID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "NoteID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
              "Export": {
                "Name": "sls-inventory-management-dev-ServerlessDeploymentBucketName"
              }
            },
            "AddProductLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-AddProductLambdaFunctionQualifiedArn"
              }
            },
            "GetProductsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetProductsLambdaFunctionQualifiedArn"
              }
            },
            "UpdateProductLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-UpdateProductLambdaFunctionQualifiedArn"
              }
            },
            "DeleteProductLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-DeleteProductLambdaFunctionQualifiedArn"
              }
            },
            "AddInboundNoteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-AddInboundNoteLambdaFunctionQualifiedArn"
              }
            },
            "GetAllInboundNotesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetAllInboundNotesLambdaFunctionQualifiedArn"
              }
            },
            "GetInboundNoteDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetInboundNoteDataLambdaFunctionQualifiedArn"
              }
            },
            "GetInboundNoteXLSXLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetInboundNoteXLSXLambdaFunctionQualifiedArn"
              }
            },
            "DeleteInboundNoteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-DeleteInboundNoteLambdaFunctionQualifiedArn"
              }
            },
            "AddOutboundNoteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-AddOutboundNoteLambdaFunctionQualifiedArn"
              }
            },
            "GetAllOutboundNotesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetAllOutboundNotesLambdaFunctionQualifiedArn"
              }
            },
            "GetOutboundNoteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-GetOutboundNoteLambdaFunctionQualifiedArn"
              }
            },
            "DeleteOutboundNoteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU"
              },
              "Export": {
                "Name": "sls-inventory-management-dev-DeleteOutboundNoteLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-inventory-management-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "pythonRequirements": {
          "dockerizePip": true
        }
      },
      "functions": {
        "addProduct": {
          "handler": "handler.add_product",
          "events": [
            {
              "http": {
                "path": "products",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-addProduct",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "AddProductLambdaVersionWCvjB36PCy6MGq7jXUoMwZKDUAhYMsdS6QnS50oVDg"
        },
        "getProducts": {
          "handler": "handler.get_products",
          "events": [
            {
              "http": {
                "path": "products",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getProducts",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetProductsLambdaVersionvRwIyP54ylu13NKjBM2JFOpFaFVuWnSINACBHiHfwkQ"
        },
        "updateProduct": {
          "handler": "handler.update_product",
          "events": [
            {
              "http": {
                "path": "products/{product_id}",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-updateProduct",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "UpdateProductLambdaVersion9G5gOb1e3zuzYQhLrB7M9xY34v5hoPPDYRoTqfUmg"
        },
        "deleteProduct": {
          "handler": "handler.delete_product",
          "events": [
            {
              "http": {
                "path": "products/{product_id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-deleteProduct",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "DeleteProductLambdaVersionGY0aNYCuUag3Gx5qpaa3FGw96jbTJMa6zFQAV5DSE"
        },
        "addInboundNote": {
          "handler": "handler.add_inbound_note",
          "events": [
            {
              "http": {
                "path": "inbound-notes",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-addInboundNote",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "AddInboundNoteLambdaVersionB5hRpqphX5eDNSb7KtfNYlgUjOfyGxIe4asHDrgE"
        },
        "getAllInboundNotes": {
          "handler": "handler.get_all_inbound_notes",
          "events": [
            {
              "http": {
                "path": "inbound-notes",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getAllInboundNotes",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetAllInboundNotesLambdaVersionAolEym3G8675zvUwGQOP5h5JFEIply0MDhqFMCsgvmw"
        },
        "getInboundNoteData": {
          "handler": "handler.get_inbound_note_data",
          "events": [
            {
              "http": {
                "path": "inbound-notes/{note_id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getInboundNoteData",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetInboundNoteDataLambdaVersionaDmcAxuUogRqvvVojEIWt9JGSZ03TtPXyrb0aDY0"
        },
        "getInboundNoteXLSX": {
          "handler": "handler.get_inbound_note_xlsx",
          "events": [
            {
              "http": {
                "path": "inbound-notes/{note_id}/xlsx",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getInboundNoteXLSX",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetInboundNoteXLSXLambdaVersion7EOYRqijwcfKr7BysbvkM6lVgO3AbL5qQ1Om9Os"
        },
        "deleteInboundNote": {
          "handler": "handler.delete_inbound_note",
          "events": [
            {
              "http": {
                "path": "inbound-notes/{note_id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-deleteInboundNote",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "DeleteInboundNoteLambdaVersionyorLIPs13VwZWBL83z2GkMxkiZxIbh6St1yki2HvU"
        },
        "addOutboundNote": {
          "handler": "handler.add_outbound_note",
          "events": [
            {
              "http": {
                "path": "outbound-notes",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-addOutboundNote",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "AddOutboundNoteLambdaVersionhrOggA5ZRoodvbqewF5yQxOcJRpNIOdBEqqUV2KPkmM"
        },
        "getAllOutboundNotes": {
          "handler": "handler.get_all_outbound_notes",
          "events": [
            {
              "http": {
                "path": "outbound-notes",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getAllOutboundNotes",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetAllOutboundNotesLambdaVersionTBAWSGXNh4ttGlfjRW9MzDUaGJ7brGMAOck1f15t8"
        },
        "getOutboundNote": {
          "handler": "handler.get_outbound_note",
          "events": [
            {
              "http": {
                "path": "outbound-notes/{note_id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-getOutboundNote",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetOutboundNoteLambdaVersionqUEVDEZbnfufQccBUIBH99XdzaYcfyBSy1FDTmGMmWw"
        },
        "deleteOutboundNote": {
          "handler": "handler.delete_outbound_note",
          "events": [
            {
              "http": {
                "path": "outbound-notes/{note_id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "inventory-management-dev-deleteOutboundNote",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "DeleteOutboundNoteLambdaVersionPqh9qDS2fwGxmN9IwGGdlshR0A8Sm4cuP8mzJNkU"
        }
      },
      "resources": {
        "Resources": {
          "ProductsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Products",
              "AttributeDefinitions": [
                {
                  "AttributeName": "ProductID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ProductID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "InboundNotesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "InboundNotes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "NoteID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "NoteID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "OutboundNotesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "OutboundNotes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "NoteID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "NoteID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: unsatais\r\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\r\napp: inventory-management\r\nservice: inventory-management\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.9\r\n  region: us-east-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:PutItem\r\n        - dynamodb:GetItem\r\n        - dynamodb:Scan\r\n        - dynamodb:DeleteItem\r\n        - dynamodb:UpdateItem\r\n      Resource:\r\n        - arn:aws:dynamodb:us-east-1:*:table/Products\r\n        - arn:aws:dynamodb:us-east-1:*:table/InboundNotes\r\n        - arn:aws:dynamodb:us-east-1:*:table/OutboundNotes\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n\r\ncustom:\r\n  pythonRequirements:\r\n    dockerizePip: true\r\n\r\nfunctions:\r\n  # Productos\r\n  addProduct:\r\n    handler: handler.add_product\r\n    events:\r\n      - http:\r\n          path: products\r\n          method: post\r\n\r\n  getProducts:\r\n    handler: handler.get_products\r\n    events:\r\n      - http:\r\n          path: products\r\n          method: get\r\n\r\n  updateProduct:\r\n    handler: handler.update_product\r\n    events:\r\n      - http:\r\n          path: products/{product_id}\r\n          method: put\r\n\r\n  deleteProduct:\r\n    handler: handler.delete_product\r\n    events:\r\n      - http:\r\n          path: products/{product_id}\r\n          method: delete\r\n\r\n  # Notas de Ingreso\r\n  addInboundNote:\r\n    handler: handler.add_inbound_note\r\n    events:\r\n      - http:\r\n          path: inbound-notes\r\n          method: post\r\n  \r\n  getAllInboundNotes:\r\n    handler: handler.get_all_inbound_notes\r\n    events:\r\n      - http:\r\n          path: inbound-notes\r\n          method: get\r\n\r\n  getInboundNoteData:\r\n    handler: handler.get_inbound_note_data\r\n    events:\r\n      - http:\r\n          path: inbound-notes/{note_id}\r\n          method: get\r\n\r\n  getInboundNoteXLSX:\r\n    handler: handler.get_inbound_note_xlsx\r\n    events:\r\n      - http:\r\n          path: inbound-notes/{note_id}/xlsx\r\n          method: get\r\n\r\n  deleteInboundNote:\r\n    handler: handler.delete_inbound_note\r\n    events:\r\n      - http:\r\n          path: inbound-notes/{note_id}\r\n          method: delete\r\n\r\n  # Notas de Salida\r\n  addOutboundNote:\r\n    handler: handler.add_outbound_note\r\n    events:\r\n      - http:\r\n          path: outbound-notes\r\n          method: post\r\n\r\n  getAllOutboundNotes:\r\n    handler: handler.get_all_outbound_notes\r\n    events:\r\n      - http:\r\n          path: outbound-notes\r\n          method: get\r\n\r\n  getOutboundNote:\r\n    handler: handler.get_outbound_note\r\n    events:\r\n      - http:\r\n          path: outbound-notes/{note_id}\r\n          method: get\r\n\r\n  deleteOutboundNote:\r\n    handler: handler.delete_outbound_note\r\n    events:\r\n      - http:\r\n          path: outbound-notes/{note_id}\r\n          method: delete\r\n\r\nresources:\r\n  Resources:\r\n    ProductsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Products\r\n        AttributeDefinitions:\r\n          - AttributeName: ProductID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: ProductID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    InboundNotesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: InboundNotes\r\n        AttributeDefinitions:\r\n          - AttributeName: NoteID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: NoteID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    OutboundNotesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: OutboundNotes\r\n        AttributeDefinitions:\r\n          - AttributeName: NoteID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: NoteID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "2e14fa69df36c9b7ef55672241bec38a",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "974b5e8d-8bf2-4107-b95a-97cd83b62b10",
    "orgName": "unsatais",
    "userId": "RGYf1p41QLpVMJWVzS",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "knCbRj668wH6rC7mGH",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "unsatais",
    "subscription": null,
    "userEmail": "jpinton@unsa.edu.pe",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "038462777707",
    "projectType": "traditional",
    "versionSf": "4.4.11",
    "serviceProviderAwsCfStackName": "inventory-management-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:038462777707:stack/inventory-management-dev/c680cd80-aa6a-11ef-91dc-0affd95e5233",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:038462777707:stack/inventory-management-dev/c680cd80-aa6a-11ef-91dc-0affd95e5233",
    "serviceProviderAwsCfStackCreated": "2024-11-24T13:48:24.661Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-24T18:24:48.924Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetInboundNoteXLSXLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getInboundNoteXLSX:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetInboundNoteXLSXLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddInboundNoteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-addInboundNote:24",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-AddInboundNoteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddProductLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-addProduct:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-AddProductLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteOutboundNoteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-deleteOutboundNote:22",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-DeleteOutboundNoteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-f0ad2ffa-c38e",
        "ExportName": "sls-inventory-management-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetAllOutboundNotesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getAllOutboundNotes:15",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetAllOutboundNotesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddOutboundNoteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-addOutboundNote:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-AddOutboundNoteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllInboundNotesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getAllInboundNotes:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetAllInboundNotesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateProductLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-updateProduct:22",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-UpdateProductLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteProductLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-deleteProduct:22",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-DeleteProductLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOutboundNoteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getOutboundNote:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetOutboundNoteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetInboundNoteDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getInboundNoteData:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetInboundNoteDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteInboundNoteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-deleteInboundNote:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-DeleteInboundNoteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://8x0l5qr8ob.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-inventory-management-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "GetProductsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:038462777707:function:inventory-management-dev-getProducts:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-inventory-management-dev-GetProductsLambdaFunctionQualifiedArn"
      }
    ]
  }
}